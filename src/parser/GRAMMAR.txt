# Bigint Calculator Grammar Specification.
#
# Specification Syntax:
# This specification uses a dialect of Parsing Expression Grammar (PEG) syntax.

program     = (statement spacing?)*

# Statements
statement   = block
            | declaration
            | assignment terminator
            | if_stmt
            | while_stmt
            | for_stmt
            | "break" terminator
            | "return" expression? terminator
            | "exit" terminator
            | expression terminator
block       = "{" spacing? statement* "}" spacing?
declaration = identifier ("=" spacing? expression)? terminator
            | "def" spacing? identifier spacing? "(" spacing? (identifier (separator identifier)*)? ")" spacing? block
assignment  = identifier subscript_op? assignment_op expression
if_stmt     = "if" spacing? boolean_expr block ("elif" spacing? boolean_expr block)? ("else" spacing? block)?
while_stmt  = "while" spacing? boolean_expr block
for_stmt    = "for" spacing? identifier "in" spacing? identifier block

# Expressions
expression  = "(" spacing? expression ")" spacing?
            | func_call
            | access
            | prefix_op expression
            | expression infix_op expression
            | expression postfix_op
            | list
            | string
            | number
            | bool
func_call   = (access | identifier) "(" spacing? (expression (separator expression)*)? ")" spacing?
access      = identifier "." spacing? identifier

# Operators
assignment_op= [+-*/%^]? "=" spacing?
prefix_op   = ("not" | [+-]) spacing?
infix_op    = ([+-*/%^] spacing? | boolean_op)
boolean_op  = ([><]
            | "<="
            | ">="
            | "=="
            | "!="
            | "and"
            | "or"
            | "if" spacing? boolean_expr "else") spacing?
postfix_op  = subscript_op
subscript_op= ("[" spacing? expression "]" spacing?)+

# Types
list        = "[" spacing (expression (separator expression)*)? "]" spacing?
number      = NUM (alphanum | "_")* spacing?
string      = (["] (!["] .*) ["] | ['] (!['] .*) [']) spacing?
bool        = ("true" | "false") spacing?

identifier  = (ALPHA | "_") (alphanum | "_")* spacing?
terminator  = ";" spacing?
separator   = "," spacing?
spacing     = (SPACE | LINE_END | comment)*
comment     = "#" (!LINE_END .*) LINE_END spacing? | block_comment
block_comment= "/*" (!"*/" .*) block_comment? "*/" spacing?
alphanum    = ALPHA | NUM
ALPHA       = [a-zA-Z]
NUM         = [0-9]
SPACE       = " " | "\t"
LINE_END    = "\r"? "\n" | "\r"
